# pages/È¢ÑÊµãÂ∫ìÂ≠òÂàÜÊûê.py - Êô∫ËÉΩÂ∫ìÂ≠òÈ¢ÑË≠¶ÂàÜÊûêÁ≥ªÁªü
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import warnings

warnings.filterwarnings('ignore')

# È°µÈù¢ÈÖçÁΩÆ
st.set_page_config(
    page_title="Êô∫ËÉΩÂ∫ìÂ≠òÈ¢ÑË≠¶Á≥ªÁªü",
    page_icon="üì¶",
    layout="wide"
)

# Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
if 'authenticated' not in st.session_state or not st.session_state.authenticated:
    st.error("ËØ∑ÂÖàÁôªÂΩïÁ≥ªÁªü")
    st.switch_page("ÁôªÈôÜÁïåÈù¢haha.py")
    st.stop()

# Áªü‰∏ÄÁöÑÂ¢ûÂº∫CSSÊ†∑Âºè
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
    
    .stApp {
        font-family: 'Inter', sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        background-attachment: fixed;
    }
    
    .stApp::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: 
            radial-gradient(circle at 25% 25%, rgba(255,255,255,0.1) 2px, transparent 2px),
            radial-gradient(circle at 75% 75%, rgba(255,255,255,0.1) 2px, transparent 2px);
        background-size: 100px 100px;
        animation: float 20s linear infinite;
        pointer-events: none;
        z-index: -1;
    }
    
    @keyframes float {
        0% { transform: translateY(0px) translateX(0px); }
        25% { transform: translateY(-20px) translateX(10px); }
        50% { transform: translateY(0px) translateX(-10px); }
        75% { transform: translateY(-10px) translateX(5px); }
        100% { transform: translateY(0px) translateX(0px); }
    }
    
    .main .block-container {
        background: rgba(255,255,255,0.98) !important;
        border-radius: 20px;
        padding: 2rem;
        margin-top: 2rem;
        box-shadow: 0 20px 60px rgba(0,0,0,0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .page-header {
        text-align: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #667eea 100%);
        background-size: 200% 200%;
        color: white;
        padding: 3rem 2rem;
        border-radius: 25px;
        margin-bottom: 2rem;
        animation: gradientShift 4s ease infinite, fadeInScale 1.5s ease-out, glow 2s ease-in-out infinite alternate;
        box-shadow: 
            0 20px 40px rgba(102, 126, 234, 0.4),
            0 5px 15px rgba(0,0,0,0.1),
            inset 0 1px 0 rgba(255,255,255,0.1);
        position: relative;
        overflow: hidden;
    }
    
    @keyframes gradientShift {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }
    
    @keyframes fadeInScale {
        from { opacity: 0; transform: translateY(-50px) scale(0.8); }
        to { opacity: 1; transform: translateY(0) scale(1); }
    }
    
    @keyframes glow {
        from { box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4), 0 5px 15px rgba(0,0,0,0.1); }
        to { box-shadow: 0 25px 50px rgba(102, 126, 234, 0.6), 0 8px 20px rgba(0,0,0,0.15); }
    }
    
    .page-title {
        font-size: 3.2rem;
        font-weight: 800;
        margin-bottom: 1rem;
        line-height: 1.1;
    }
    
    .page-subtitle {
        font-size: 1.3rem;
        font-weight: 400;
        opacity: 0.9;
    }
    
    /* Áªü‰∏ÄÁöÑÂç°ÁâáÂÆπÂô®Ê†∑Âºè */
    .metric-card, .analysis-card {
        background: rgba(255,255,255,0.96) !important;
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 1.5rem;
        box-shadow: 
            0 15px 35px rgba(0,0,0,0.08),
            0 5px 15px rgba(0,0,0,0.03),
            inset 0 1px 0 rgba(255,255,255,0.9);
        border: 1px solid rgba(255,255,255,0.3);
        animation: slideUpStagger 1s ease-out;
        backdrop-filter: blur(10px);
        position: relative;
        overflow: hidden;
        transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        border-left: 4px solid #667eea;
    }
    
    .metric-card {
        text-align: center;
        height: 100%;
    }
    
    .metric-card::before, .analysis-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.1), transparent);
        transition: left 0.8s ease;
    }
    
    .metric-card:hover, .analysis-card:hover {
        transform: translateY(-10px) scale(1.02);
        box-shadow: 
            0 30px 60px rgba(0,0,0,0.15),
            0 15px 30px rgba(102, 126, 234, 0.2);
        border-color: rgba(102, 126, 234, 0.3);
    }
    
    .metric-card:hover::before, .analysis-card:hover::before {
        left: 100%;
    }
    
    @keyframes slideUpStagger {
        from { opacity: 0; transform: translateY(60px) scale(0.8); }
        to { opacity: 1; transform: translateY(0) scale(1); }
    }
    
    .metric-value {
        font-size: 3.2rem;
        font-weight: 800;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #667eea 100%);
        background-size: 200% 200%;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 1rem;
        animation: textGradient 4s ease infinite;
        line-height: 1;
    }
    
    @keyframes textGradient {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }
    
    .metric-label {
        color: #374151 !important;
        font-size: 1.1rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        letter-spacing: 0.5px;
        text-transform: uppercase;
    }
    
    .metric-description {
        color: #6b7280 !important;
        font-size: 0.9rem;
        margin-top: 0.8rem;
        font-weight: 500;
        font-style: italic;
    }
    
    .chart-title {
        font-size: 1.4rem;
        font-weight: 700;
        color: #333 !important;
        margin-bottom: 1rem;
        text-align: center;
        background: linear-gradient(45deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    
    .insight-box {
        background: rgba(255,255,255,0.96) !important;
        border-left: 4px solid #667eea;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        color: #333 !important;
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    .insight-box:hover {
        transform: translateY(-3px);
        box-shadow: 0 12px 25px rgba(102, 126, 234, 0.15);
    }
    
    .insight-title {
        font-weight: 700;
        color: #333 !important;
        margin-bottom: 0.8rem;
        font-size: 1.1rem;
    }
    
    .insight-content {
        color: #666 !important;
        line-height: 1.6;
        font-size: 1rem;
    }
    
    .stTabs [data-baseweb="tab-list"] {
        gap: 15px;
        background: rgba(248, 250, 252, 0.95) !important;
        padding: 1rem;
        border-radius: 20px;
        box-shadow: inset 0 2px 4px rgba(0,0,0,0.06), 0 4px 8px rgba(0,0,0,0.04);
        backdrop-filter: blur(10px);
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 65px;
        padding: 0 35px;
        background: rgba(255,255,255,0.95) !important;
        border-radius: 15px;
        border: 1px solid rgba(102, 126, 234, 0.15);
        font-weight: 700;
        font-size: 1rem;
        transition: all 0.4s ease;
        position: relative;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0,0,0,0.05);
    }
    
    .stTabs [data-baseweb="tab"]:hover {
        transform: translateY(-5px) scale(1.05);
        box-shadow: 0 15px 30px rgba(102, 126, 234, 0.2);
        border-color: rgba(102, 126, 234, 0.4);
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        color: white !important;
        border: none;
        transform: translateY(-3px) scale(1.02);
        box-shadow: 0 15px 40px rgba(102, 126, 234, 0.4), 0 5px 15px rgba(0,0,0,0.1);
    }
    
    /* ÁâπÊÆäÈ£éÈô©Á≠âÁ∫ßÈ¢úËâ≤ */
    .risk-extreme { border-left-color: #ff4757 !important; }
    .risk-high { border-left-color: #ff6348 !important; }
    .risk-medium { border-left-color: #ffa502 !important; }
    .risk-low { border-left-color: #2ed573 !important; }
    .risk-minimal { border-left-color: #5352ed !important; }
    
    /* È°µËÑöÊ†∑Âºè‰ºòÂåñ */
    .footer-text {
        text-align: center;
        color: rgba(255, 255, 255, 0.8) !important;
        font-family: "Inter", sans-serif;
        font-size: 0.8rem !important;
        margin-top: 2rem;
        padding: 1rem;
        background: rgba(102, 126, 234, 0.1);
        border-radius: 10px;
        backdrop-filter: blur(5px);
    }
    
    /* Âä®ÁîªÂª∂Ëøü */
    .metric-card:nth-child(1) { animation-delay: 0.1s; }
    .metric-card:nth-child(2) { animation-delay: 0.2s; }
    .metric-card:nth-child(3) { animation-delay: 0.3s; }
    .metric-card:nth-child(4) { animation-delay: 0.4s; }
    
    /* ÂìçÂ∫îÂºèËÆæËÆ° */
    @media (max-width: 768px) {
        .metric-value { font-size: 2.5rem; }
        .metric-card { padding: 2rem 1.5rem; }
        .page-header { padding: 2rem 1rem; }
        .page-title { font-size: 2.5rem; }
    }
</style>
""", unsafe_allow_html=True)

# ÈÖçËâ≤ÊñπÊ°à
COLOR_SCHEME = {
    'primary': '#667eea',
    'secondary': '#764ba2', 
    'risk_extreme': '#ff4757',
    'risk_high': '#ff6348',
    'risk_medium': '#ffa502',
    'risk_low': '#2ed573',
    'risk_minimal': '#5352ed',
    'chart_colors': ['#667eea', '#ff6b9d', '#c44569', '#ffc75f', '#f8b500', '#845ec2', '#4e8397', '#00c9a7']
}

# Êï∞ÊçÆÂä†ËΩΩÂáΩÊï∞
@st.cache_data
def load_and_process_data():
    """Âä†ËΩΩÂíåÂ§ÑÁêÜÊâÄÊúâÊï∞ÊçÆ"""
    # ËØªÂèñÊï∞ÊçÆÊñá‰ª∂
    shipment_df = pd.read_excel('2409~250224Âá∫Ë¥ßÊï∞ÊçÆ.xlsx')
    forecast_df = pd.read_excel('2409~2502‰∫∫Â∑•È¢ÑÊµã.xlsx') 
    inventory_df = pd.read_excel('Âê´ÊâπÊ¨°Â∫ìÂ≠ò0221(2).xlsx')
    price_df = pd.read_excel('Âçï‰ª∑.xlsx')
    
    # Â§ÑÁêÜÊó•Êúü
    shipment_df['ËÆ¢ÂçïÊó•Êúü'] = pd.to_datetime(shipment_df['ËÆ¢ÂçïÊó•Êúü'])
    forecast_df['ÊâÄÂ±ûÂπ¥Êúà'] = pd.to_datetime(forecast_df['ÊâÄÂ±ûÂπ¥Êúà'], format='%Y-%m')
    
    # ÂàõÂª∫‰∫ßÂìÅ‰ª£Á†ÅÂà∞ÂêçÁß∞ÁöÑÊò†Â∞Ñ
    product_name_map = {}
    for idx, row in inventory_df.iterrows():
        if pd.notna(row['Áâ©Êñô']) and pd.notna(row['ÊèèËø∞']) and isinstance(row['Áâ©Êñô'], str) and row['Áâ©Êñô'].startswith('F'):
            product_name_map[row['Áâ©Êñô']] = row['ÊèèËø∞']
    
    # Â§ÑÁêÜÂ∫ìÂ≠òÊï∞ÊçÆ
    batch_data = []
    current_material = None
    current_desc = None
    current_price = 0
    
    for idx, row in inventory_df.iterrows():
        if pd.notna(row['Áâ©Êñô']) and isinstance(row['Áâ©Êñô'], str) and row['Áâ©Êñô'].startswith('F'):
            current_material = row['Áâ©Êñô']
            current_desc = row['ÊèèËø∞']
            price_match = price_df[price_df['‰∫ßÂìÅ‰ª£Á†Å'] == current_material]
            current_price = price_match['Âçï‰ª∑'].iloc[0] if len(price_match) > 0 else 100
        elif pd.notna(row['Áîü‰∫ßÊó•Êúü']) and current_material:
            prod_date = pd.to_datetime(row['Áîü‰∫ßÊó•Êúü'])
            quantity = row['Êï∞Èáè'] if pd.notna(row['Êï∞Èáè']) else 0
            batch_no = row['Áîü‰∫ßÊâπÂè∑'] if pd.notna(row['Áîü‰∫ßÊâπÂè∑']) else ''
            
            age_days = (datetime.now() - prod_date).days
            
            if age_days >= 120:
                risk_level = 'ÊûÅÈ´òÈ£éÈô©'
                risk_color = COLOR_SCHEME['risk_extreme']
                risk_advice = 'üö® Á´ãÂç≥7ÊäòÊ∏ÖÂ∫ì'
            elif age_days >= 90:
                risk_level = 'È´òÈ£éÈô©'
                risk_color = COLOR_SCHEME['risk_high'] 
                risk_advice = '‚ö†Ô∏è Âª∫ËÆÆ8Êäò‰øÉÈîÄ'
            elif age_days >= 60:
                risk_level = '‰∏≠È£éÈô©'
                risk_color = COLOR_SCHEME['risk_medium']
                risk_advice = 'üì¢ ÈÄÇÂ∫¶9Êäò‰øÉÈîÄ'
            elif age_days >= 30:
                risk_level = '‰ΩéÈ£éÈô©'
                risk_color = COLOR_SCHEME['risk_low']
                risk_advice = '‚úÖ Ê≠£Â∏∏ÈîÄÂîÆ'
            else:
                risk_level = 'ÊûÅ‰ΩéÈ£éÈô©'
                risk_color = COLOR_SCHEME['risk_minimal']
                risk_advice = 'üåü Êñ∞È≤úÂ∫ìÂ≠ò'
            
            if age_days >= 120:
                expected_loss = quantity * current_price * 0.3
            elif age_days >= 90:
                expected_loss = quantity * current_price * 0.2
            elif age_days >= 60:
                expected_loss = quantity * current_price * 0.1
            else:
                expected_loss = 0
            
            batch_data.append({
                'Áâ©Êñô': current_material,
                '‰∫ßÂìÅÂêçÁß∞': current_desc,
                'Áîü‰∫ßÊó•Êúü': prod_date,
                'Áîü‰∫ßÊâπÂè∑': batch_no,
                'Êï∞Èáè': quantity,
                'Â∫ìÈæÑ': age_days,
                'È£éÈô©Á≠âÁ∫ß': risk_level,
                'È£éÈô©È¢úËâ≤': risk_color,
                'Â§ÑÁêÜÂª∫ËÆÆ': risk_advice,
                'Âçï‰ª∑': current_price,
                'ÊâπÊ¨°‰ª∑ÂÄº': quantity * current_price,
                'È¢ÑÊúüÊçüÂ§±': expected_loss
            })
    
    processed_inventory = pd.DataFrame(batch_data)
    forecast_accuracy = calculate_forecast_accuracy(shipment_df, forecast_df)
    metrics = calculate_key_metrics(processed_inventory, forecast_accuracy)
    
    return processed_inventory, forecast_accuracy, shipment_df, forecast_df, metrics, product_name_map

def calculate_forecast_accuracy(shipment_df, forecast_df):
    """ËÆ°ÁÆóÈ¢ÑÊµãÂáÜÁ°ÆÁéá"""
    try:
        shipment_monthly = shipment_df.groupby([
            shipment_df['ËÆ¢ÂçïÊó•Êúü'].dt.to_period('M'),
            '‰∫ßÂìÅ‰ª£Á†Å'
        ])['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'].sum().reset_index()
        shipment_monthly['Âπ¥Êúà'] = shipment_monthly['ËÆ¢ÂçïÊó•Êúü'].dt.to_timestamp()
        
        merged = forecast_df.merge(
            shipment_monthly,
            left_on=['ÊâÄÂ±ûÂπ¥Êúà', '‰∫ßÂìÅ‰ª£Á†Å'],
            right_on=['Âπ¥Êúà', '‰∫ßÂìÅ‰ª£Á†Å'],
            how='inner'
        )
        
        merged['È¢ÑÊµãËØØÂ∑Æ'] = abs(merged['È¢ÑËÆ°ÈîÄÂîÆÈáè'] - merged['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'])
        merged['È¢ÑÊµãÂáÜÁ°ÆÁéá'] = 1 - (merged['È¢ÑÊµãËØØÂ∑Æ'] / (merged['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'] + 1))
        merged['È¢ÑÊµãÂáÜÁ°ÆÁéá'] = merged['È¢ÑÊµãÂáÜÁ°ÆÁéá'].clip(0, 1)
        
        return merged
    except:
        return pd.DataFrame()

def calculate_key_metrics(processed_inventory, forecast_accuracy):
    """ËÆ°ÁÆóÂÖ≥ÈîÆÊåáÊ†á"""
    total_batches = len(processed_inventory)
    high_risk_batches = len(processed_inventory[processed_inventory['È£éÈô©Á≠âÁ∫ß'].isin(['ÊûÅÈ´òÈ£éÈô©', 'È´òÈ£éÈô©'])])
    high_risk_ratio = (high_risk_batches / total_batches * 100) if total_batches > 0 else 0
    
    total_inventory_value = processed_inventory['ÊâπÊ¨°‰ª∑ÂÄº'].sum() / 1000000
    high_risk_value = processed_inventory[
        processed_inventory['È£éÈô©Á≠âÁ∫ß'].isin(['ÊûÅÈ´òÈ£éÈô©', 'È´òÈ£éÈô©'])
    ]['ÊâπÊ¨°‰ª∑ÂÄº'].sum()
    high_risk_value_ratio = (high_risk_value / processed_inventory['ÊâπÊ¨°‰ª∑ÂÄº'].sum() * 100) if processed_inventory['ÊâπÊ¨°‰ª∑ÂÄº'].sum() > 0 else 0
    
    avg_age = processed_inventory['Â∫ìÈæÑ'].mean()
    forecast_acc = forecast_accuracy['È¢ÑÊµãÂáÜÁ°ÆÁéá'].mean() * 100 if not forecast_accuracy.empty else 0
    
    risk_counts = processed_inventory['È£éÈô©Á≠âÁ∫ß'].value_counts().to_dict()
    
    return {
        'total_batches': int(total_batches),
        'high_risk_batches': int(high_risk_batches),
        'high_risk_ratio': round(high_risk_ratio, 1),
        'total_inventory_value': round(total_inventory_value, 2),
        'high_risk_value_ratio': round(high_risk_value_ratio, 1),
        'avg_age': round(avg_age, 0),
        'forecast_accuracy': round(forecast_acc, 1) if forecast_acc > 0 else 0,
        'high_risk_value': round(high_risk_value / 1000000, 1),
        'risk_counts': {
            'extreme': risk_counts.get('ÊûÅÈ´òÈ£éÈô©', 0),
            'high': risk_counts.get('È´òÈ£éÈô©', 0),
            'medium': risk_counts.get('‰∏≠È£éÈô©', 0),
            'low': risk_counts.get('‰ΩéÈ£éÈô©', 0),
            'minimal': risk_counts.get('ÊûÅ‰ΩéÈ£éÈô©', 0)
        }
    }

# È¢ÑÊµãÂàÜÊûêÁõ∏ÂÖ≥ÂáΩÊï∞
def process_forecast_data(shipment_df, forecast_df):
    """Â§ÑÁêÜÈ¢ÑÊµãÊï∞ÊçÆ"""
    # ËΩ¨Êç¢Êó•ÊúüÊ†ºÂºè
    shipment_df['ÊâÄÂ±ûÂπ¥Êúà'] = shipment_df['ËÆ¢ÂçïÊó•Êúü'].dt.strftime('%Y-%m')
    forecast_df['ÊâÄÂ±ûÂπ¥Êúà'] = forecast_df['ÊâÄÂ±ûÂπ¥Êúà'].dt.strftime('%Y-%m')
    
    # ÊåâÊúà‰ªΩ„ÄÅÂå∫Âüü„ÄÅ‰∫ßÂìÅÁ†ÅÊ±áÊÄªÊï∞ÊçÆ
    actual_monthly = shipment_df.groupby(['ÊâÄÂ±ûÂπ¥Êúà', 'ÊâÄÂ±ûÂå∫Âüü', '‰∫ßÂìÅ‰ª£Á†Å']).agg({
        'Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ': 'sum'
    }).reset_index()

    forecast_monthly = forecast_df.groupby(['ÊâÄÂ±ûÂπ¥Êúà', 'ÊâÄÂ±ûÂå∫Âüü', '‰∫ßÂìÅ‰ª£Á†Å']).agg({
        'È¢ÑËÆ°ÈîÄÂîÆÈáè': 'sum'
    }).reset_index()

    # ÂêàÂπ∂Êï∞ÊçÆ
    merged_monthly = pd.merge(
        actual_monthly,
        forecast_monthly,
        on=['ÊâÄÂ±ûÂπ¥Êúà', 'ÊâÄÂ±ûÂå∫Âüü', '‰∫ßÂìÅ‰ª£Á†Å'],
        how='outer'
    ).fillna(0)

    # ËÆ°ÁÆóÂáÜÁ°ÆÁéá
    merged_monthly['Êï∞ÈáèÂáÜÁ°ÆÁéá'] = merged_monthly.apply(
        lambda row: max(0, 1 - abs(row['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'] - row['È¢ÑËÆ°ÈîÄÂîÆÈáè']) / (row['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'] + 1)),
        axis=1
    )

    return merged_monthly

def create_risk_analysis_dashboard(processed_inventory):
    """ÂàõÂª∫Á¥ßÂáëÁöÑÈ£éÈô©ÂàÜÊûê‰ª™Ë°®Áõò"""
    # È£éÈô©ÂàÜÂ∏ÉÊï∞ÊçÆ
    risk_counts = processed_inventory['È£éÈô©Á≠âÁ∫ß'].value_counts()
    risk_value = processed_inventory.groupby('È£éÈô©Á≠âÁ∫ß')['ÊâπÊ¨°‰ª∑ÂÄº'].sum() / 1000000
    
    colors = [COLOR_SCHEME['risk_extreme'], COLOR_SCHEME['risk_high'], 
              COLOR_SCHEME['risk_medium'], COLOR_SCHEME['risk_low'], COLOR_SCHEME['risk_minimal']]
    
    # ÂàõÂª∫2x2Â≠êÂõæ
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=("È£éÈô©Á≠âÁ∫ßÂàÜÂ∏É", "ÂêÑÈ£éÈô©Á≠âÁ∫ß‰ª∑ÂÄºÂàÜÂ∏É", "Â∫ìÂ≠òÊâπÊ¨°Â∫ìÈæÑÂàÜÂ∏É", "È´òÈ£éÈô©ÊâπÊ¨°ÂàÜÊûê"),
        specs=[[{"type": "pie"}, {"type": "bar"}],
               [{"type": "histogram"}, {"type": "scatter"}]],
        vertical_spacing=0.12,
        horizontal_spacing=0.1
    )
    
    # 1. È£éÈô©Á≠âÁ∫ßÂàÜÂ∏ÉÈ•ºÂõæ
    fig.add_trace(go.Pie(
        labels=risk_counts.index,
        values=risk_counts.values,
        hole=.4,
        marker_colors=colors,
        textinfo='label+percent',
        showlegend=False
    ), row=1, col=1)
    
    # 2. È£éÈô©Á≠âÁ∫ß‰ª∑ÂÄºÂàÜÂ∏É
    fig.add_trace(go.Bar(
        x=risk_value.index,
        y=risk_value.values,
        marker_color=colors,
        text=[f'¬•{v:.1f}M' for v in risk_value.values],
        textposition='auto',
        showlegend=False
    ), row=1, col=2)
    
    # 3. Â∫ìÈæÑÂàÜÂ∏ÉÁõ¥ÊñπÂõæ
    fig.add_trace(go.Histogram(
        x=processed_inventory['Â∫ìÈæÑ'],
        nbinsx=15,
        marker_color=COLOR_SCHEME['primary'],
        opacity=0.7,
        showlegend=False
    ), row=2, col=1)
    
    # 4. È´òÈ£éÈô©ÊâπÊ¨°Êï£ÁÇπÂõæ
    high_risk_data = processed_inventory[
        processed_inventory['È£éÈô©Á≠âÁ∫ß'].isin(['ÊûÅÈ´òÈ£éÈô©', 'È´òÈ£éÈô©'])
    ].head(20)
    
    if not high_risk_data.empty:
        fig.add_trace(go.Scatter(
            x=high_risk_data['Â∫ìÈæÑ'],
            y=high_risk_data['ÊâπÊ¨°‰ª∑ÂÄº'],
            mode='markers',
            marker=dict(
                size=np.clip(high_risk_data['Êï∞Èáè']/15, 8, 30),
                color=high_risk_data['È£éÈô©Á≠âÁ∫ß'].map({
                    'ÊûÅÈ´òÈ£éÈô©': COLOR_SCHEME['risk_extreme'],
                    'È´òÈ£éÈô©': COLOR_SCHEME['risk_high']
                }),
                opacity=0.8,
                line=dict(width=1, color='white')
            ),
            text=high_risk_data['‰∫ßÂìÅÂêçÁß∞'],
            showlegend=False
        ), row=2, col=2)
    
    # Êõ¥Êñ∞Â∏ÉÂ±Ä
    fig.update_layout(
        height=700,
        title_text="Â∫ìÂ≠òÈ£éÈô©ÁªºÂêàÂàÜÊûê‰ª™Ë°®Áõò",
        title_x=0.5,
        title_font=dict(size=20, color='#333'),
        showlegend=False
    )
    
    # Ê∑ªÂä†Â∫ìÈæÑÈòàÂÄºÁ∫ø
    fig.add_vline(x=30, line_dash="dash", line_color=COLOR_SCHEME['risk_low'], row=2, col=1)
    fig.add_vline(x=60, line_dash="dash", line_color=COLOR_SCHEME['risk_medium'], row=2, col=1)
    fig.add_vline(x=90, line_dash="dash", line_color=COLOR_SCHEME['risk_high'], row=2, col=1)
    fig.add_vline(x=120, line_dash="dash", line_color=COLOR_SCHEME['risk_extreme'], row=2, col=1)
    
    return fig

def create_forecast_dashboard(merged_data):
    """ÂàõÂª∫È¢ÑÊµãÂàÜÊûê‰ª™Ë°®Áõò - ÊåâÁÖßÈôÑ‰ª∂Áª¥Â∫¶"""
    # ËÆ°ÁÆóÂêÑÈ°πÊåáÊ†á
    # 1. ÂÖ®ÂõΩÂáÜÁ°ÆÁéáË∂ãÂäø
    monthly_national = merged_data.groupby('ÊâÄÂ±ûÂπ¥Êúà').agg({
        'Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ': 'sum',
        'È¢ÑËÆ°ÈîÄÂîÆÈáè': 'sum'
    }).reset_index()
    monthly_national['ÂáÜÁ°ÆÁéá'] = monthly_national.apply(
        lambda row: max(0, 1 - abs(row['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'] - row['È¢ÑËÆ°ÈîÄÂîÆÈáè']) / (row['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'] + 1)) * 100,
        axis=1
    )
    
    # 2. Âå∫ÂüüÂáÜÁ°ÆÁéáÂØπÊØî
    regional_accuracy = merged_data.groupby('ÊâÄÂ±ûÂå∫Âüü').agg({
        'Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ': 'sum',
        'È¢ÑËÆ°ÈîÄÂîÆÈáè': 'sum'
    }).reset_index()
    regional_accuracy['ÂáÜÁ°ÆÁéá'] = regional_accuracy.apply(
        lambda row: max(0, 1 - abs(row['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'] - row['È¢ÑËÆ°ÈîÄÂîÆÈáè']) / (row['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'] + 1)) * 100,
        axis=1
    )
    
    # 3. ‰∫ßÂìÅÂáÜÁ°ÆÁéáÂàÜÊûê
    product_accuracy = merged_data.groupby('‰∫ßÂìÅ‰ª£Á†Å').agg({
        'Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ': 'sum',
        'È¢ÑËÆ°ÈîÄÂîÆÈáè': 'sum'
    }).reset_index()
    product_accuracy['ÂáÜÁ°ÆÁéá'] = product_accuracy.apply(
        lambda row: max(0, 1 - abs(row['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'] - row['È¢ÑËÆ°ÈîÄÂîÆÈáè']) / (row['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'] + 1)) * 100,
        axis=1
    )
    product_accuracy = product_accuracy.nlargest(10, 'Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ')
    
    # 4. È¢ÑÊµãÂáÜÁ°ÆÁéáÂàÜÂ∏É
    accuracy_distribution = merged_data['Êï∞ÈáèÂáÜÁ°ÆÁéá'] * 100
    
    # ÂàõÂª∫2x2Â≠êÂõæÂ∏ÉÂ±Ä
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=("È¢ÑÊµãÂáÜÁ°ÆÁéáÊúàÂ∫¶Ë∂ãÂäø", "ÂêÑÂå∫ÂüüÈ¢ÑÊµãÂáÜÁ°ÆÁéáÂØπÊØî", "TOP10‰∫ßÂìÅÈ¢ÑÊµãÂáÜÁ°ÆÁéá", "È¢ÑÊµãÂáÜÁ°ÆÁéáÂàÜÂ∏É"),
        specs=[[{"type": "scatter"}, {"type": "bar"}],
               [{"type": "bar"}, {"type": "histogram"}]],
        vertical_spacing=0.12,
        horizontal_spacing=0.1
    )
    
    # 1. ÊúàÂ∫¶Ë∂ãÂäø
    fig.add_trace(go.Scatter(
        x=monthly_national['ÊâÄÂ±ûÂπ¥Êúà'],
        y=monthly_national['ÂáÜÁ°ÆÁéá'],
        mode='lines+markers',
        name='ÂáÜÁ°ÆÁéá',
        line=dict(color=COLOR_SCHEME['primary'], width=3),
        marker=dict(size=8),
        showlegend=False
    ), row=1, col=1)
    
    # Ê∑ªÂä†ÁõÆÊ†áÁ∫ø
    fig.add_hline(y=85, line_dash="dash", line_color="red", row=1, col=1)
    
    # 2. Âå∫ÂüüÂØπÊØî
    colors_regional = [COLOR_SCHEME['risk_low'] if acc > 85 else 
                      COLOR_SCHEME['risk_medium'] if acc > 75 else 
                      COLOR_SCHEME['risk_high'] for acc in regional_accuracy['ÂáÜÁ°ÆÁéá']]
    
    fig.add_trace(go.Bar(
        x=regional_accuracy['ÊâÄÂ±ûÂå∫Âüü'],
        y=regional_accuracy['ÂáÜÁ°ÆÁéá'],
        marker_color=colors_regional,
        text=[f'{acc:.1f}%' for acc in regional_accuracy['ÂáÜÁ°ÆÁéá']],
        textposition='auto',
        showlegend=False
    ), row=1, col=2)
    
    fig.add_hline(y=85, line_dash="dash", line_color="red", row=1, col=2)
    
    # 3. ‰∫ßÂìÅÂáÜÁ°ÆÁéá
    colors_product = [COLOR_SCHEME['risk_low'] if acc > 85 else 
                     COLOR_SCHEME['risk_medium'] if acc > 75 else 
                     COLOR_SCHEME['risk_high'] for acc in product_accuracy['ÂáÜÁ°ÆÁéá']]
    
    fig.add_trace(go.Bar(
        y=product_accuracy['‰∫ßÂìÅ‰ª£Á†Å'],
        x=product_accuracy['ÂáÜÁ°ÆÁéá'],
        orientation='h',
        marker_color=colors_product,
        text=[f'{acc:.1f}%' for acc in product_accuracy['ÂáÜÁ°ÆÁéá']],
        textposition='auto',
        showlegend=False
    ), row=2, col=1)
    
    # 4. ÂáÜÁ°ÆÁéáÂàÜÂ∏É
    fig.add_trace(go.Histogram(
        x=accuracy_distribution,
        nbinsx=20,
        marker_color=COLOR_SCHEME['secondary'],
        opacity=0.7,
        showlegend=False
    ), row=2, col=2)
    
    # Êõ¥Êñ∞Â∏ÉÂ±Ä
    fig.update_layout(
        height=700,
        title_text="ÈîÄÂîÆÈ¢ÑÊµãÂáÜÁ°ÆÊÄßÁªºÂêàÂàÜÊûê‰ª™Ë°®Áõò",
        title_x=0.5,
        title_font=dict(size=20, color='#333'),
        showlegend=False
    )
    
    return fig

# Âä†ËΩΩÊï∞ÊçÆ
with st.spinner('üîÑ Ê≠£Âú®Âä†ËΩΩÊï∞ÊçÆ...'):
    processed_inventory, forecast_accuracy, shipment_df, forecast_df, metrics, product_name_map = load_and_process_data()

# È°µÈù¢Ê†áÈ¢ò
st.markdown("""
<div class="page-header">
    <h1 class="page-title">üì¶ Êô∫ËÉΩÂ∫ìÂ≠òÈ¢ÑË≠¶ÂàÜÊûêÁ≥ªÁªü</h1>
    <p class="page-subtitle">Êï∞ÊçÆÈ©±Âä®ÁöÑÂ∫ìÂ≠òÈ£éÈô©ÁÆ°ÁêÜ‰∏éÈ¢ÑÊµãÂàÜÊûêÂÜ≥Á≠ñÊîØÊåÅÂπ≥Âè∞</p>
</div>
""", unsafe_allow_html=True)

# ÂàõÂª∫Ê†áÁ≠æÈ°µ
tab1, tab2, tab3, tab4 = st.tabs([
    "üìä Ê†∏ÂøÉÊåáÊ†áÊÄªËßà",
    "üéØ È£éÈô©ÂàÜÂ∏ÉÂàÜÊûê", 
    "üí° ÈîÄÂîÆÈ¢ÑÊµãÂáÜÁ°ÆÊÄßÂàÜÊûê",
    "üìã ÊâπÊ¨°ËØ¶ÊÉÖ"
])

# Ê†áÁ≠æ1ÔºöÊ†∏ÂøÉÊåáÊ†áÊÄªËßà
with tab1:
    st.markdown("### üéØ ÂÖ≥ÈîÆÁª©ÊïàÊåáÊ†á")
    
    # ÊåáÊ†áÂç°Áâá - Á¥ßÂáëÂ∏ÉÂ±Ä
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">{metrics['total_batches']:,}</div>
            <div class="metric-label">üì¶ ÊÄªÊâπÊ¨°Êï∞</div>
            <div class="metric-description">ÂΩìÂâçÂ∫ìÂ≠òÊâπÊ¨°ÊÄªÊï∞</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        health_score = 100 - metrics['high_risk_ratio']
        health_class = "risk-low" if health_score > 80 else "risk-medium" if health_score > 60 else "risk-high"
        st.markdown(f"""
        <div class="metric-card {health_class}">
            <div class="metric-value">{health_score:.1f}%</div>
            <div class="metric-label">üíö Â∫ìÂ≠òÂÅ•Â∫∑Â∫¶</div>
            <div class="metric-description">{'ÂÅ•Â∫∑' if health_score > 80 else 'ÈúÄÂÖ≥Ê≥®' if health_score > 60 else 'È£éÈô©'}</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="metric-card">
            <div class="metric-value">¬•{metrics['total_inventory_value']:.1f}M</div>
            <div class="metric-label">üí∞ Â∫ìÂ≠òÊÄª‰ª∑ÂÄº</div>
            <div class="metric-description">ÂÖ®ÈÉ®Â∫ìÂ≠ò‰ª∑ÂÄºÁªüËÆ°</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        risk_class = "risk-extreme" if metrics['high_risk_ratio'] > 25 else "risk-high" if metrics['high_risk_ratio'] > 15 else "risk-medium"
        st.markdown(f"""
        <div class="metric-card {risk_class}">
            <div class="metric-value">{metrics['high_risk_ratio']:.1f}%</div>
            <div class="metric-label">‚ö†Ô∏è È´òÈ£éÈô©Âç†ÊØî</div>
            <div class="metric-description">ÈúÄË¶ÅÁ¥ßÊÄ•Â§ÑÁêÜÁöÑÊâπÊ¨°</div>
        </div>
        """, unsafe_allow_html=True)
    
    # Á¨¨‰∫åË°åÊåáÊ†á
    col5, col6, col7, col8 = st.columns(4)
    
    with col5:
        age_class = "risk-extreme" if metrics['avg_age'] > 90 else "risk-high" if metrics['avg_age'] > 60 else "risk-medium" if metrics['avg_age'] > 30 else "risk-low"
        st.markdown(f"""
        <div class="metric-card {age_class}">
            <div class="metric-value">{metrics['avg_age']:.0f}Â§©</div>
            <div class="metric-label">‚è∞ Âπ≥ÂùáÂ∫ìÈæÑ</div>
            <div class="metric-description">Â∫ìÂ≠òÊâπÊ¨°Âπ≥ÂùáÂ§©Êï∞</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col6:
        forecast_class = "risk-low" if metrics['forecast_accuracy'] > 85 else "risk-medium" if metrics['forecast_accuracy'] > 75 else "risk-high"
        st.markdown(f"""
        <div class="metric-card {forecast_class}">
            <div class="metric-value">{metrics['forecast_accuracy']:.1f}%</div>
            <div class="metric-label">üéØ È¢ÑÊµãÂáÜÁ°ÆÁéá</div>
            <div class="metric-description">ÈîÄÂîÆÈ¢ÑÊµãÁ≤æÂ∫¶Ê∞¥Âπ≥</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col7:
        st.markdown(f"""
        <div class="metric-card risk-extreme">
            <div class="metric-value">¬•{metrics['high_risk_value']:.1f}M</div>
            <div class="metric-label">üö® È´òÈ£éÈô©‰ª∑ÂÄº</div>
            <div class="metric-description">È´òÈ£éÈô©ÊâπÊ¨°ÊÄª‰ª∑ÂÄº</div>
        </div>
        """, unsafe_allow_html=True)
    
    with col8:
        turnover_rate = 365 / metrics['avg_age'] if metrics['avg_age'] > 0 else 0
        turnover_class = "risk-low" if turnover_rate > 10 else "risk-medium" if turnover_rate > 6 else "risk-high"
        st.markdown(f"""
        <div class="metric-card {turnover_class}">
            <div class="metric-value">{turnover_rate:.1f}</div>
            <div class="metric-label">üîÑ Âë®ËΩ¨Áéá</div>
            <div class="metric-description">Âπ¥Â∫ìÂ≠òÂë®ËΩ¨Ê¨°Êï∞</div>
        </div>
        """, unsafe_allow_html=True)

# Ê†áÁ≠æ2ÔºöÈ£éÈô©ÂàÜÂ∏ÉÂàÜÊûê - Á¥ßÂáëÂ∏ÉÂ±Ä
with tab2:
    st.markdown("### üéØ Â∫ìÂ≠òÈ£éÈô©ÂàÜÂ∏ÉÂÖ®ÊôØÂàÜÊûê")
    
    # Âçï‰∏™Á¥ßÂáëÁöÑ‰ª™Ë°®Áõò
    st.markdown('<div class="analysis-card">', unsafe_allow_html=True)
    risk_dashboard = create_risk_analysis_dashboard(processed_inventory)
    st.plotly_chart(risk_dashboard, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ÂÖ≥ÈîÆÊ¥ûÂØü
    st.markdown(f"""
    <div class="insight-box">
        <div class="insight-title">üìä ÁªºÂêàÈ£éÈô©ÂàÜÊûêÊ¥ûÂØü</div>
        <div class="insight-content">
            ‚Ä¢ <strong>È£éÈô©ÂàÜÂ∏ÉÔºö</strong>ÊûÅÈ´òÈ£éÈô© {metrics['risk_counts']['extreme']}‰∏™ÊâπÊ¨° ({metrics['risk_counts']['extreme']/metrics['total_batches']*100:.1f}%)ÔºåÈ´òÈ£éÈô© {metrics['risk_counts']['high']}‰∏™ÊâπÊ¨° ({metrics['risk_counts']['high']/metrics['total_batches']*100:.1f}%)<br>
            ‚Ä¢ <strong>‰ª∑ÂÄºÂΩ±ÂìçÔºö</strong>È´òÈ£éÈô©ÊâπÊ¨°‰ª∑ÂÄºÂç†ÊØî {metrics['high_risk_value_ratio']:.1f}%ÔºåÊÄªËÆ°¬•{metrics['high_risk_value']:.1f}M<br>
            ‚Ä¢ <strong>Á¥ßÊÄ•Âª∫ËÆÆÔºö</strong>Á´ãÂç≥Â§ÑÁêÜÊûÅÈ´òÈ£éÈô©ÊâπÊ¨°ÔºåÈÄöËøá7-8Êäò‰øÉÈîÄÈ¢ÑËÆ°ÂèØÂõûÊî∂ËµÑÈáë¬•{metrics['high_risk_value']*0.8:.1f}M<br>
            ‚Ä¢ <strong>‰ºòÂÖàÁ∫ßÔºö</strong>Âè≥‰∏äËßíÊ∞îÊ≥°ÂõæÊòæÁ§∫È´òÂ∫ìÈæÑÈ´ò‰ª∑ÂÄºÊâπÊ¨°Â∫î‰ºòÂÖàÂ§ÑÁêÜÔºåÊ∞îÊ≥°Â§ßÂ∞è‰ª£Ë°®Êï∞Èáè
        </div>
    </div>
    """, unsafe_allow_html=True)

# Ê†áÁ≠æ3ÔºöÈ¢ÑÊµãÂáÜÁ°ÆÊÄßÂàÜÊûê - ÂÆåÂÖ®ÊåâÁÖßÈôÑ‰ª∂Áª¥Â∫¶
with tab3:
    st.markdown("### üìà ÈîÄÂîÆÈ¢ÑÊµãÂáÜÁ°ÆÊÄßÁªºÂêàÂàÜÊûê")
    
    # Â§ÑÁêÜÈ¢ÑÊµãÊï∞ÊçÆ
    if not forecast_accuracy.empty and not shipment_df.empty and not forecast_df.empty:
        merged_data = process_forecast_data(shipment_df, forecast_df)
        
        if not merged_data.empty:
            # ËÆ°ÁÆóÂÖ≥ÈîÆÊåáÊ†á
            total_actual = merged_data['Ê±ÇÂíåÈ°π:Êï∞ÈáèÔºàÁÆ±Ôºâ'].sum()
            total_forecast = merged_data['È¢ÑËÆ°ÈîÄÂîÆÈáè'].sum()
            overall_accuracy = max(0, 1 - abs(total_actual - total_forecast) / (total_actual + 1)) * 100
            
            # ÂÖ≥ÈîÆÊåáÊ†áÂ±ïÁ§∫
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{total_actual:,.0f}</div>
                    <div class="metric-label">üìä ÂÆûÈôÖÈîÄÂîÆÈáè</div>
                    <div class="metric-description">ÊÄªÈîÄÈáè(ÁÆ±)</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{total_forecast:,.0f}</div>
                    <div class="metric-label">üéØ È¢ÑÊµãÈîÄÂîÆÈáè</div>
                    <div class="metric-description">ÊÄªÈ¢ÑÊµã(ÁÆ±)</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                accuracy_class = "risk-low" if overall_accuracy > 85 else "risk-medium" if overall_accuracy > 75 else "risk-high"
                st.markdown(f"""
                <div class="metric-card {accuracy_class}">
                    <div class="metric-value">{overall_accuracy:.1f}%</div>
                    <div class="metric-label">üéØ Êï¥‰ΩìÂáÜÁ°ÆÁéá</div>
                    <div class="metric-description">ÂÖ®ÂõΩÈ¢ÑÊµãÁ≤æÂ∫¶</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col4:
                improvement_potential = max(0, 85 - overall_accuracy)
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{improvement_potential:.1f}%</div>
                    <div class="metric-label">üìà ÊèêÂçáÁ©∫Èó¥</div>
                    <div class="metric-description">Ë∑ùÁ¶ªÁõÆÊ†á85%</div>
                </div>
                """, unsafe_allow_html=True)
            
            # È¢ÑÊµãÂàÜÊûê‰ª™Ë°®Áõò
            st.markdown('<div class="analysis-card">', unsafe_allow_html=True)
            forecast_dashboard = create_forecast_dashboard(merged_data)
            st.plotly_chart(forecast_dashboard, use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)
            
            # ÊîπËøõÂª∫ËÆÆ
            st.markdown(f"""
            <div class="insight-box">
                <div class="insight-title">üí° È¢ÑÊµãÊîπËøõÂª∫ËÆÆ</div>
                <div class="insight-content">
                    ‚Ä¢ <strong>Êï¥‰ΩìË°®Áé∞Ôºö</strong>ÂΩìÂâçÂáÜÁ°ÆÁéá{overall_accuracy:.1f}%Ôºå{'Â∑≤ËææÂà∞ÁõÆÊ†á' if overall_accuracy >= 85 else 'ÈúÄË¶ÅÊîπËøõ'}<br>
                    ‚Ä¢ <strong>ÈáçÁÇπÂÖ≥Ê≥®Ôºö</strong>Âä†Âº∫Â≠£ËäÇÊÄßÂõ†Â≠êÂàÜÊûêÔºåÊèêÂçáÂéÜÂè≤Êï∞ÊçÆÊùÉÈáç<br>
                    ‚Ä¢ <strong>Âå∫Âüü‰ºòÂåñÔºö</strong>ÈíàÂØπÂáÜÁ°ÆÁéá‰Ωé‰∫é75%ÁöÑÂå∫ÂüüÂà∂ÂÆö‰∏ìÈ°πÊîπËøõËÆ°Âàí<br>
                    ‚Ä¢ <strong>‰∫ßÂìÅ‰ºòÂåñÔºö</strong>ÈáçÁÇπÊèêÂçáTOP10‰∫ßÂìÅÁöÑÈ¢ÑÊµãÁ≤æÂ∫¶ÔºåÂ¢ûÂä†Â∏ÇÂú∫Ë∂ãÂäøË∞ÉÁ†î
                </div>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.warning("Êï∞ÊçÆÂ§ÑÁêÜ‰∏≠ÔºåÊöÇÊó†ÂèØÂàÜÊûêÁöÑÈ¢ÑÊµãÊï∞ÊçÆ")
    else:
        st.warning("Áº∫Â∞ëÂøÖË¶ÅÁöÑÈ¢ÑÊµãÊï∞ÊçÆÊñá‰ª∂ÔºåËØ∑Ê£ÄÊü•Êï∞ÊçÆÊ∫ê")

# Ê†áÁ≠æ4ÔºöÊâπÊ¨°ËØ¶ÊÉÖ
with tab4:
    st.markdown("### üìã Â∫ìÂ≠òÊâπÊ¨°ËØ¶ÁªÜ‰ø°ÊÅØ")
    
    # Á≠õÈÄâÂô®
    st.markdown('<div class="analysis-card">', unsafe_allow_html=True)
    col1, col2, col3 = st.columns(3)
    
    with col1:
        risk_filter = st.selectbox(
            "ÈÄâÊã©È£éÈô©Á≠âÁ∫ß",
            options=['ÂÖ®ÈÉ®'] + list(processed_inventory['È£éÈô©Á≠âÁ∫ß'].unique()),
            index=0
        )
    
    with col2:
        min_value = st.number_input(
            "ÊúÄÂ∞èÊâπÊ¨°‰ª∑ÂÄº",
            min_value=0,
            max_value=int(processed_inventory['ÊâπÊ¨°‰ª∑ÂÄº'].max()),
            value=0
        )
    
    with col3:
        max_age = st.number_input(
            "ÊúÄÂ§ßÂ∫ìÈæÑ(Â§©)",
            min_value=0,
            max_value=int(processed_inventory['Â∫ìÈæÑ'].max()),
            value=int(processed_inventory['Â∫ìÈæÑ'].max())
        )
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Â∫îÁî®Á≠õÈÄâ
    filtered_data = processed_inventory.copy()
    
    if risk_filter != 'ÂÖ®ÈÉ®':
        filtered_data = filtered_data[filtered_data['È£éÈô©Á≠âÁ∫ß'] == risk_filter]
    
    filtered_data = filtered_data[
        (filtered_data['ÊâπÊ¨°‰ª∑ÂÄº'] >= min_value) &
        (filtered_data['Â∫ìÈæÑ'] <= max_age)
    ]
    
    # Á≠õÈÄâÁªìÊûú
    st.markdown(f"""
    <div class="insight-box">
        <div class="insight-title">üìä Á≠õÈÄâÁªìÊûúÁªüËÆ°</div>
        <div class="insight-content">
            Á≠õÈÄâÂá∫ <strong>{len(filtered_data)}</strong> ‰∏™ÊâπÊ¨°ÔºåÊÄª‰ª∑ÂÄº <strong>¬•{filtered_data['ÊâπÊ¨°‰ª∑ÂÄº'].sum()/1000000:.2f}M</strong>Ôºå
            Âπ≥ÂùáÂ∫ìÈæÑ <strong>{filtered_data['Â∫ìÈæÑ'].mean():.0f}</strong> Â§©
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Êï∞ÊçÆË°®Ê†º
    if not filtered_data.empty:
        st.markdown('<div class="analysis-card">', unsafe_allow_html=True)
        display_columns = ['Áâ©Êñô', '‰∫ßÂìÅÂêçÁß∞', 'Áîü‰∫ßÊó•Êúü', 'Áîü‰∫ßÊâπÂè∑', 'Êï∞Èáè', 'Â∫ìÈæÑ', 'È£éÈô©Á≠âÁ∫ß', 'ÊâπÊ¨°‰ª∑ÂÄº', 'Â§ÑÁêÜÂª∫ËÆÆ']
        display_data = filtered_data[display_columns].copy()
        
        display_data['ÊâπÊ¨°‰ª∑ÂÄº'] = display_data['ÊâπÊ¨°‰ª∑ÂÄº'].apply(lambda x: f"¬•{x:,.0f}")
        display_data['Áîü‰∫ßÊó•Êúü'] = display_data['Áîü‰∫ßÊó•Êúü'].dt.strftime('%Y-%m-%d')
        
        risk_order = {'ÊûÅÈ´òÈ£éÈô©': 0, 'È´òÈ£éÈô©': 1, '‰∏≠È£éÈô©': 2, '‰ΩéÈ£éÈô©': 3, 'ÊûÅ‰ΩéÈ£éÈô©': 4}
        display_data['È£éÈô©ÊéíÂ∫è'] = display_data['È£éÈô©Á≠âÁ∫ß'].map(risk_order)
        display_data = display_data.sort_values(['È£éÈô©ÊéíÂ∫è', 'Â∫ìÈæÑ'], ascending=[True, False])
        display_data = display_data.drop('È£éÈô©ÊéíÂ∫è', axis=1)
        
        st.dataframe(display_data, use_container_width=True, height=400)
        
        csv = display_data.to_csv(index=False, encoding='utf-8-sig')
        st.download_button(
            label="üì• ‰∏ãËΩΩÁ≠õÈÄâÁªìÊûú",
            data=csv,
            file_name=f"Â∫ìÂ≠òÂàÜÊûê_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv"
        )
        st.markdown('</div>', unsafe_allow_html=True)
    else:
        st.warning("Ê≤°ÊúâÁ¨¶ÂêàÁ≠õÈÄâÊù°‰ª∂ÁöÑÊï∞ÊçÆ")

# È°µËÑö
st.markdown("---")
st.markdown(
    f"""
    <div class="footer-text">
        <p>üöÄ Powered by Streamlit & Plotly | Êô∫ËÉΩÊï∞ÊçÆÂàÜÊûêÂπ≥Âè∞ | ÊúÄÂêéÊõ¥Êñ∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}</p>
    </div>
    """,
    unsafe_allow_html=True
)
